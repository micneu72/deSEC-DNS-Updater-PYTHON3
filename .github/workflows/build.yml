name: Build Binaries

on:
  push:
    tags:
      - 'v*'  # Wird ausgelöst, wenn ein Tag mit 'v' beginnt (z.B. v1.0.0)
  workflow_dispatch:  # Erlaubt manuelle Ausführung

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux (x86_64)
          - os: ubuntu-20.04
            platform: linux
            arch: x86_64
            binary_name: desec
            
          # Linux (ARM64/aarch64) für neuere Raspberry Pi
          - os: ubuntu-20.04
            platform: linux
            arch: aarch64
            binary_name: desec
            
          # Linux (ARM/armv7l) für ältere Raspberry Pi
          - os: ubuntu-20.04
            platform: linux
            arch: armv7l
            binary_name: desec
            
          # macOS (Intel)
          - os: macos-latest
            platform: macos
            arch: x86_64
            binary_name: desec
            
          # macOS (Apple Silicon/ARM)
          - os: macos-latest
            platform: macos
            arch: arm64
            binary_name: desec

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Build with PyInstaller (Standard)
      if: matrix.os != 'ubuntu-20.04' || matrix.arch == 'x86_64'
      run: |
        pyinstaller --onefile --name ${{ matrix.binary_name }} desec.py
        
    - name: Set up QEMU (für ARM-Builds)
      if: matrix.os == 'ubuntu-20.04' && (matrix.arch == 'aarch64' || matrix.arch == 'armv7l')
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64,arm
        
    - name: Build ARM binaries with Docker
      if: matrix.os == 'ubuntu-20.04' && (matrix.arch == 'aarch64' || matrix.arch == 'armv7l')
      run: |
        # Für aarch64/arm64
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          docker run --rm -v $(pwd):/src --platform linux/arm64 python:3.10-slim bash -c "
            apt-get update && apt-get install -y binutils build-essential zlib1g-dev libmagic-dev patchelf &&
            cd /src && 
            pip install --upgrade pip wheel setuptools &&
            pip install -r requirements.txt &&
            pip install pyinstaller==5.13.2 &&
            pyinstaller --onefile --name ${{ matrix.binary_name }} --clean --log-level DEBUG desec.py
          "

        # Für armv7l/armhf
        elif [ "${{ matrix.arch }}" = "armv7l" ]; then
          docker run --rm -v $(pwd):/src --platform linux/arm/v7 python:3.10-slim bash -c "
            apt-get update && apt-get install -y binutils build-essential zlib1g-dev libmagic-dev patchelf &&
            cd /src && 
            pip install --upgrade pip wheel setuptools &&
            pip install -r requirements.txt &&
            pip install pyinstaller==5.13.2 &&
            pyinstaller --onefile --name ${{ matrix.binary_name }} --clean --log-level DEBUG desec.py
          "
        fi

        
    - name: Create platform-specific directory
      run: |
        mkdir -p dist || sudo mkdir -p dist
        sudo chmod 777 dist
        mkdir -p dist/${{ matrix.platform }}-${{ matrix.arch }}
        if [ "${{ matrix.os }}" = "ubuntu-20.04" ] && [ "${{ matrix.arch }}" != "x86_64" ]; then
          ls -la dist/
          sudo cp -f dist/${{ matrix.binary_name }} dist/${{ matrix.platform }}-${{ matrix.arch }}/ || echo "Binary not found, checking subdirectories..."
          find dist -name "${{ matrix.binary_name }}" -type f -exec sudo cp -f {} dist/${{ matrix.platform }}-${{ matrix.arch }}/ \;
        else
          sudo cp -f dist/${{ matrix.binary_name }}* dist/${{ matrix.platform }}-${{ matrix.arch }}/ || echo "Binary not found, checking subdirectories..."
          find dist -name "${{ matrix.binary_name }}*" -type f -exec sudo cp -f {} dist/${{ matrix.platform }}-${{ matrix.arch }}/ \;
        fi
        ls -la dist/${{ matrix.platform }}-${{ matrix.arch }}/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/${{ matrix.platform }}-${{ matrix.arch }}

  # Job zum Zusammenfassen aller Binaries in einem Zip-Archiv
  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
          
      - name: Create release ZIP
        run: |
          mkdir -p binaries
          cd binaries
          if [ "$(ls -A)" ]; then
            zip -r ../desec-binaries.zip *
          else
            echo "No artifacts found, creating empty ZIP file"
            touch empty.txt
            zip -r ../desec-binaries.zip empty.txt
          fi

          
      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-binaries
          path: desec-binaries.zip
      
      - name: Debug Info
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Is Tag: ${{ startsWith(github.ref, 'refs/tags/') }}"
          ls -la

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: desec-binaries.zip
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false

